
(let ((x 1)) x)				; 1

(let ((x)) x)				; #<unspecified>

(define (foo x . lst) lst)		; foo
(foo 1)					; ()
(foo 1 2)				; (2)
(foo 1 2 3)				; (2 3)
(foo)					;; Insufficient fixed arguments


(define (foo x . rest) (+ x (fold-left + 0 rest))) ; foo

(foo 10)				; 10
(foo 10 10)				; 20
(foo 10 10 10 10)			; 40

(define x-eval eval)			; x-eval
(x-eval '(+ 10 20))			; 30

(define x-lambda lambda)		; x-lambda
(x-lambda (x) x)			; #<procedure

(x-eval '((x-lambda (x) x) 10))		; 10

(let ((lambda 1)) (x-lambda () lambda)) ; #<procedure

(define foo (let ((lambda 1)) (x-lambda () lambda))) ; foo

;; named let
(let foo ((x 1)) x)			; 1
(let foo ((x 10)) (cond ((zero? x) 42) (else (foo (- x 1))))) ; 42

(foo)					; 1

(and)					; #t
(and 1 2)				; 2
(and 1 2 3 #f 5)			; #f


(or)					; #f
(or 1)					; 1
(or #f 1 2)				; 1
(or #f #f '() #f #f)			; ()


(let* ((a 1)) a)			; 1
(let* () 1)				; 1
(let* ((a 1) (b a)) b)			; 1
(let* ((a b) (b 1)) a)			;; Unbound variable, b
(let* ((a 2) (b (* a a))) b)		; 4


(letrec () 1)				; 1
(letrec ((a 1)) a)			; 1

;; this should be an error, but isn't (pg. 12, restriction on letrec)
(letrec ((a 1) (b a)) b)		; 1

(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (zero? n) #f (even? (- n 1)))))) (even? 88)) ; #t
(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (zero? n) #f (even? (- n 1)))))) (even? 87)) ; #f


(case (* 10 10) ((0 1 2 3 4 5) 'weird) ((100) 'ok) (else 'fail)) ; ok

;; not eqv
(case #(1 2 3) ((#(1 2 3)) 'ok) (else 'fail))			; fail

(case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite)) ; composite
(case (car '(c d)) ((a) 'a) ((b) 'b))			   ; #<unspecified>
(case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant)) ; consonant

