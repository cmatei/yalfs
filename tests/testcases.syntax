
(let ((x 1)) x)				; 1

(let ((x)) x)				; #<unspecified>

(define (foo x . lst) lst)		; foo
(foo 1)					; ()
(foo 1 2)				; (2)
(foo 1 2 3)				; (2 3)
(foo)					;; Insufficient fixed arguments


(define (foo x . rest) (+ x (fold-left + 0 rest))) ; foo

(foo 10)				; 10
(foo 10 10)				; 20
(foo 10 10 10 10)			; 40

(define x-eval eval)			; x-eval
(x-eval '(+ 10 20))			; 30

(define x-lambda lambda)		; x-lambda
(x-lambda (x) x)			; #<procedure

(x-eval '((x-lambda (x) x) 10))		; 10

(let ((lambda 1)) (x-lambda () lambda)) ; #<procedure

(define foo (let ((lambda 1)) (x-lambda () lambda))) ; foo

(foo)					; 1

(and)					; #t
(and 1 2)				; 2
(and 1 2 3 #f 5)			; #f


(or)					; #f
(or 1)					; 1
(or #f 1 2)				; 1
(or #f #f '() #f #f)			; ()


