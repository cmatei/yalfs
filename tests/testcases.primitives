
;; Number operations

(number? 5)				; #t
(number? 'a)				; #f
(number? "abc")				; #f
(number? #t)				; #f
(number? '())				; #f
(number? (lambda (x) (* x x)))		; #f

(integer? 2)				; #t
(integer? #\a)				; #f

(=)					; #t
(= 1)					; #t
(= 1 1)					; #t
(= 1 2)					; #f
(= 1 1 1 1 1)				; #t
(= 1 1 1 1 2)				; #f

(<)					; #t
(< 1)					; #t
(< 1 2)					; #t
(< 1 1)					; #f
(< 1 -1)				; #f

(>)					; #t
(> 1)					; #t
(> 1 0 -1)				; #t
(> 2 1 2)				; #f

(<= 1 1 1 2)				; #t
(<=)					; #t
(<= 1 0 1 -10)				; #f
(<= -1000 -500 500)			; #t
(<= 1 1 -10)				; #f

(>= 10 9 8 7)				; #t
(>= 10 -10)				; #t
(>= -10 10)				; #f

(>= 'a)					;Expecting numbers


(zero? 0)				; #t
(zero? #\a)				;Expecting a number
(zero? 5)				; #f
(zero? -5)				; #f

(positive?)				;Expecting 1 arguments but was sent 0
(positive? 1 2)				;Expecting 1 arguments but was sent 2
(positive? 0)				; #f
(positive? 1)				; #t
(positive? -1)				; #f

(negative? 0)				; #f
(negative? 1)				; #f
(negative? -1)				; #t

(negative?)				;Expecting 1 arguments but was sent 0
(negative? 1 2 3)		        ;Expecting 1 arguments but was sent 3

(odd?)					;Expecting 1 arguments but was sent 0
(odd? 1)				; #t
(odd? -1)				; #t
(odd? 0)				; #f

(even?)					;Expecting 1 arguments but was sent 0

(even? 0)				; #t
(even? 2)				; #t
(even? 3)				; #f
(even? -3)				; #f

(even? #f)				;Expecting a number

(max)					;Expecting at least 1 argument
(max 1)					; 1
(max 1 2 3 4 5 6 7 8 9 10)		; 10
(max -1 -10000 10)			; 10

(min)					;Expecting at least 1 argument
(min 1 2 3 4 5 6 7 8 9 10)		; 1
(min -10 -9 -8 10 1)			; -10

(+)					; 0
(+ 0)					; 0
(+ 1)					; 1
(+ 1 2 3 -3 -2 -1)			; 0
(+ 10 10 10)				; 30

(-)					;Expecting at least 1 argument
(- 0)					; 0
(- 1)					; -1
(- -1)					; 1
(- 10 50)				; -40
(- -10 -20)				; 10

(*)					; 1
(* 0)					; 0
(* 1)					; 1
(* 10 10)				; 100
(* -10 -10)				; 100
(* -10 10)				; -100

(/)					;Expecting at least 1 argument
(/ 1)					; 1
(/ 2)					; 0
(/ 4 2 1)				; 2
(/ 4 2 -1)				; -2
(/ -1)					; -1
(/ -4 -2)				; 2
(/ -4 2)				; -2

(abs)					;Expecting 1 arguments but was sent 0
(abs 0)					; 0
(abs 100)				; 100
(abs -100)				; 100
(abs 1 1)				;Expecting 1 arguments but was sent 2

(quotient 0 3)				; 0
(quotient 3 0)				;Will not divide by zero

(quotient 6 2)				; 3
(quotient 6 -2)				; -3
(quotient -6 -2)			; 3
(quotient -6 2)				; -3

(modulo 13 4)				; 1
(remainder 13 4)			; 1

(modulo -13 4)				; 3
(remainder -13 4)			; -1

(modulo 13 -4)				; -3
(remainder 13 -4)			; 1

(modulo -13 -4)				; -1
(remainder -13 -4)			; -1

(define (f n1 n2) (= n1 (+ (* n2 (quotient n1 n2)) (remainder n1 n2)))) ; f

(f 13 4)				; #t
(f -13 4)				; #t
(f -13 -4)				; #t
(f 13 -4)				; #t

(number->string)			;Expecting 1 or 2 arguments

;; fail these so I remember it's not implemented
(number->string  2  2)			; "10"
(number->string  8  8)			; "10"
(number->string 16 16)			; "10"

;;(number->string 255 16)			; "ff"
;;(number->string -255 16)		; "-ff"

(number->string 0)			; "0"
(number->string 255)			; "255"
(number->string -255)			; "-255"

(string->number "255")			; 255
(string->number "-255")			; -255
(string->number "11111111" 2)		; 255
(string->number "-11111111" 2)		; -255
(string->number "377" 8)		; 255
(string->number "-377" 8)		; -255
(string->number "ff" 16)		; 255
(string->number "-ff" 16)		; -255

(string->number "1010" 2)		; 10

(eq? (string->number (number->string -10)) -10) ; #t

(string->number "foo")			; #f
(string->number "123a")			; #f


(not #f)				; #t
(not #t)				; #f
(not 3)					; #f
(not '())				; #f
(not 'nil)				; #f

(boolean? #f)				; #t
(boolean? #t)				; #t
(boolean? '())				; #f
(boolean? 0)				; #f

(list 'a 'b 'c)				; (a b c)

(define x (list 'a 'b 'c))		; x
(define y x)				; y

y					; (a b c)
(list? y)				; #t
;; unspecified
(set-cdr! x 4)				; #<unspecified>
x					; (a . 4)
(list? y)				; #f

;; unspecified
(set-cdr! x x)				; #<unspecified>
(list? x)				; #f

(list? '(a b . c))			; #f
(list? '(a (b . c)))			; #t
(list? '(a . b))			; #f
(list? '(a b c . d))			; #f
(list? 1)				; #f
(list? '())				; #t

(define x (list 1 2 3))			; x
(set-cdr! x x)				; #<unspecified>
(list? x)				; #f

(pair? '())				; #f
(pair? '(a . b))			; #t
(pair? '(a b c))			; #t

(cons 'a '())				; (a)
(cons '(a) '(b c d))			; ((a) b c d)
(cons "a" '(b c))			; ("a" b c)
(cons 'a 3)				; (a . 3)
(cons '(a b) 'c)			; ((a b) . c)

(car '())				;Expecting a pair
(car '(a b c))				; a
(car '((a) b c d))			; (a)
(car '(1 . 2))				; 1

(cdr '())				;Expecting a pair
(cdr '((a) b c d))			; (b c d)
(cdr '(1 . 2))				; 2

(define (f) (list 'not-a-constant-list)) ; f
(define (g) '(constant-list))		 ; g

;; unspecified
(set-car! (f) 3)			; #<unspecified>

;; r5rs says this is an error, but i don't have constant lists
(set-car! (g) 3)			; #<unspecified>

(caar (list (list 1 2) (list 3 4)))		; 1
(cadr (list (list 1 2) (list 3 4)))		; (3 4)
(cdar (list (list 1 2) (list 3 4)))		; (2)
(cddr (list (list 1 2) (list 3 4)))		; ()

(caaar (list (list (list 1 2) 3 4) 5 6)) ; 1
(caadr (list (list (list 1 2) 3 4) (list 5) 6)) ; 5

(null? '())				; #t

(null? 1)				; #f
(null? (cons 1 2))			; #f

(list 'a (+ 3 4) 'c)			; (a 7 c)
(list)					; ()

(length '(a b c))			; 3
(length '(a (b) (c d e)))		; 3
(length '())				; 0

(length #f)				;Object is not a proper list

(append)				; ()
(append '(x) '(y))			; (x y)
(append '(a) '(b c d))			; (a b c d)
(append '(a (b)) '((c)))		; (a (b) (c))

(append '(a b) '(c . d))		; (a b c . d)
(append '() 'a)				; a

(append '(a b) 'a)			; (a b . a)
(append '(a b) #f)			; (a b . #f)

(append 3 3)				;Expecting lists

(reverse)				;Expecting 1 arguments but was sent 0

(reverse '(a b c))			; (c b a)
(reverse '(a (b c) d (e (f))))		; ((e (f)) d (b c) a)


(list-tail '() 0)			; ()
(list-tail '() 1)			;List too short
(list-tail '() -1)			;Expecting an index integer

(list-tail '(a b c d e) 0)		; (a b c d e)
(list-tail '(a b c d e) 1)		; (b c d e)

(list-ref '() 0)			;List is empty
(list-ref '(a b c d e) 3)		; d
(list-ref '(a b c d . e) 3)		;Expecting a list
(list-ref '(a b c d e) 6)		;List too short

(memq 'a '(a b c))			; (a b c)
(memq 'b '(a b c))			; (b c)
(memq 'a '(b c d))			; #f
(memq (list 'a) '(b (a) c))		; #f

;; unspecified
(memq 101 '(100 101 102))		; (101 102)

;; specified
(memv 101 '(100 101 102))		; (101 102)


(member (list 'a) '(b (a) c))		; ((a) c)
(member '(b 2) '((a 1) (b 2) (c 3)))	; ((b 2) (c 3))

(define e '((a 1) (b 2) (c 3)))		; e
(assq 'a e)				; (a 1)
(assq 'b e)				; (b 2)
(assq 'd e)				; #f
(assq (list 'a) '(((a)) ((b)) ((c))))	; #f

(assoc (list 'a) '(((a)) ((b)) ((c))))	; ((a))

;; unspecified
(assq 5 '((2 3) (5 7) (11 13)))		; (5 7)

;; specified
(assv 5 '((2 3) (5 7) (11 13)))		; (5 7)


(symbol? 'symbol?)			; #t
(symbol? '())				; #f
(symbol? 5)				; #f

(symbol? (car '(a b)))			; #t
(symbol? 'nil)				; #t
(symbol? '())				; #f
(symbol? #f)				; #f


(symbol->string 'symbol->string)	; "symbol->string"

(symbol->string 'Martin)		; "martin"

;; note the upcase, since the symbol is not interned by the reader
(symbol->string (string->symbol "Malvina")) ; "Malvina"

(eq? 'mISSISSIppi 'mississippi)		; #t

;; again, upper case
(string->symbol "mISSISSIppi")		; mISSISSIppi

;; this is because we're a lowercase scheme, but the string->symbol
;; produces non-lowercase chars
(eq? 'bitBlt (string->symbol "bitBlt"))	; #f

(eq? 'JollyWog (string->symbol (symbol->string 'JollyWog))) ; #t

;; i won't be able to read this back! CL puts non-reader symbols
;; in |K. Harper, M.D.|
(symbol->string (string->symbol "K. Harper, M.D.")) ; "K. Harper, M.D."


(char? #\A)				; #t
(char? 5)				; #f

;; should i restrict to 2 arguments or more ? mit-scheme does...
(char=?)				; #t
(char=? #\a)				; #t
(char=? #\a #\a)			; #t
(char=? #\a #\a #\a)			; #t
(char=? #\a #\b #\a)			; #f

(char<? #\A #\B)			; #t
(char<? #\A #\B #\B)			; #f
(char<=? #\A #\B #\B)			; #t
(char<=? #\B #\A)			; #f
(char>=? #\C #\C #\B #\A)		; #t

(char<? #\0 #\9)			; #t

(char-ci=? #\a #\A)			; #t
(char-ci=? #\a #\B)			; #f

(char-ci<? #\A #\b)			; #t
(char-ci<? #\A #\b #\b)			; #f
(char-ci<=? #\A #\b #\b)		; #t
(char-ci<=? #\b #\A)			; #f
(char-ci>=? #\C #\C #\b #\A)		; #t

(char-alphabetic?)			;Expecting 1 arguments but was sent 0
(char-alphabetic? #\A)			; #t
(char-alphabetic? #\5)			; #f

(char-numeric? #\A)			; #f
(char-numeric? #\4)			; #t

(char-whitespace? #\space)		; #t
(char-whitespace? #\newline)		; #t

(char-whitespace? #\a)			; #f

(char-upper-case? #\a)			; #f
(char-upper-case? #\A)			; #t

(char-lower-case? #\a)			; #t
(char-lower-case? #\A)			; #f


(char->integer #\a)			; 97
(char->integer #\A)			; 65

(integer->char 97)			; #\a
(integer->char 9999)			;Integer out of character range

(char->integer (integer->char 97))	; 97
(integer->char (char->integer #\A))	; #\A

(char-upcase #\A)			; #\A
(char-upcase #\a)			; #\A

(char-upcase #\5)			; #\5

(char-downcase #\a)			; #\a
(char-downcase #\A)			; #\a

(string? "abc")				; #t
(string? #f)				; #f

;; meh...
;; (make-string 4)			; ""
(string-length (make-string 4))		; 4
(make-string 4 #\space)			; "    "
(make-string 2 #\newline)		; "\n\n"

(string)				; ""
(string #\a #\b #\c)			; "abc"

(define x "aspidistra")			; x
(string-length x)			; 10

(string-ref x 0)			; #\a
(string-ref x 9)			; #\a
(string-ref x 10)			;Not a valid index
(string-ref x -1)			;Not a valid index

(define x "abcdefghi")			; x
(string-ref x 0)			; #\a

(string-set!)				;Expecting 3 arguments
(string-set! 0 0 0)			;Expecting a string
(string-set! x #f 0)			;Expecting an integer
(string-set! x 0 'z)			;Expecting a character
(string-set! x 0 #\z)			; #<unspecified>

x					; "zbcdefghi"
(string-set! x 9 #\Z)			;Not a valid index
(string-set! x 8 #\Z)			; #<unspecified>
x					; "zbcdefghZ"


(define (f) (make-string 3 #\*))	; f
(define (g) "***")			; g

(string-set! (f) 0 #\?)			; #<unspecified>

;; no immutable strings, sorry, so not an error
(string-set! (g) 0 #\?)			; #<unspecified>
(string-set! (symbol->string 'immutable) 0 #\?) ; #<unspecified>
'immutable					; immutable

;; these should bomb if symbol-strings ARE immutable
(define x 'immutable)			; x
x					; immutable
(string-set! (symbol->string x) 0 #\Y)	; #<unspecified>
x					; immutable
(eq? x 'immutable)			; #t


;; please test these thoroughly
(string=?)				;Expecting at least 2 arguments
(string=? #f #t)			;Expecting strings
(string=? "aaaa" "aaaa")		; #t
(string=? "aaaa" "a")			; #f

(string<? "" "")			; #f
(string>? "" "")			; #f
(string<=? "" "")			; #t
(string>=? "" "")			; #t

(string<? "" "a")			; #t
(string>? "" "a")			; #f
(string<=? "" "a")			; #t
(string>=? "" "a")			; #f

(string<? "a" "")			; #f
(string>? "a" "")			; #t
(string<=? "a" "")			; #f
(string>=? "a" "")			; #t


(string-ci=? "aAbBxXyY" "AaBbXxYy")	; #t

(string<? "abc" "abc")			; #f
(string<=? "abc" "abc")			; #t
(string>=? "abc" "abc")			; #t
(string>? "abc" "abc")			; #f

(string-ci<? "abc" "ABC")		; #f
(string-ci<=? "abc" "ABC")		; #t
(string-ci>=? "abc" "ABC")		; #t
(string-ci>? "abc" "ABC")		; #f

(string<? "abc" "def" "ghi")		; #t
(string<? "abc" "def" "")		; #f
(string<? "abc" "abd" "abe")		; #t

(string<=? "abc" "abd" "abe")		; #t
(string>=? "abc" "abd" "abe")		; #f

(string<? "aaa" "aa" "a")		; #f
(string<=? "aaa" "aa" "a")		; #f


(string<? "z" "aa")			; #f
(string>? "z" "aa")			; #t

(string<=? "aab" "aabc")		; #t

(substring)				;Expecting 3 arguments
(substring "" 0 0)			; ""
(substring "" 0 1)			;Not a valid end index
(substring "a" 1 0)			;Not a valid end index
(substring "a" 1 1)			; ""
(substring "a" 0 1)			; "a"

(substring "abcdef" 5 6)		; "f"
(substring "abcdef" 0 6)		; "abcdef"

(string-append)				; ""
(string-append "abc")			; "abc"
(string-length (string-append "abc"))	; 3

(string-append "abc" "def" "ghi")	; "abcdefghi"
(string-append "abc " "" "  " "\n")	; "abc   \n"

(string->list "")			; ()
(string->list "abc def")		; (#\a #\b #\c #\space #\d #\e #\f)

(list->string '(#\a #\b #\c))		; "abc"
(list->string '())			; ""

(string=? (list->string (string->list "abcdef")) "abcdef") ; #t

(string-copy "abc")			; "abc"

;; a fresh copy
(define x "abc")			; x
(eq? (string-copy x) x)			; #f

(define x "abcdef")			; x
x					; "abcdef"
(string-fill! x #\a)			; #<unspecified>
x					; "aaaaaa"

(define x "")				; x
x					; ""
(string-fill! x #\a)			; #<unspecified>
x					; ""


;; Equality predicates

(eq? 'a 'a)				; #t

;; unspecified
(eq? '(a) '(a))				; #f

(eq? (list 'a) (list 'a))		; #f

;; unspecified
(eq? "a" "a")				; #f
(eq? "" "")				; #f

(eq? '() '())				; #t

;; unspecified
(eq? 2 2)				; #t
(eq? #\A #\A)				; #t

(eq? car car)				; #t

(define x '(a))				; x
(eq? x x)				; #t

(define p (lambda (x) x))		; p
(eq? p p)				; #t


(eqv? 'a 'a)				; #t
(eqv? 'a 'b)				; #f
(eqv? 2 2)				; #t
(eqv? #f 'nil)				; #f

(eqv? (lambda () 1) (lambda () 2))	; #f

;; symbol->string should return a copy of the string, so you cannot
;; really mutate a symbol once created.
;;
;; Since I'm checking for symbol-string equality when creating a
;; symbol object, I will never have 2 symbols with the same
;; symbol-string, which I guess is the whole point.
;;
;; The wording in R5RS is confusing wrt eqv?

;; symbol "side-effects"
(define x (string->symbol "abcdef"))	; x
(define y 'xxxxxx)			; y
(string-fill! (symbol->string x) #\x)	; #<unspecified>

(eqv? x y)				; #f

;; what the above failure means is that symbol->string
;; should return a copy.
(eq? (symbol->string x) (symbol->string x)) ; #f

(equal? 'a 'a)				; #t
(equal? '(a) '(a))			; #t
(equal? '(a (b) c) '(a (b) c))		; #t
(equal? "abc" "abc")			; #t
(equal? 2 2)				; #t

(equal? '((("abc" . "def") 2) 3) '((("abc" . "def") 2) 3)) ; #t
(equal? '((("abc" . "def") 2) 3) '((("abc" . "xxx") 2) 3)) ; #f

;; unspecified
(equal? (lambda (x) x) (lambda (y) y))	; #f


(procedure? car)			; #t
(procedure? 'car)			; #f

(procedure? (lambda (x) (* x x)))	; #t
(procedure? '(lambda (x) (* x x)))	; #f

;; I'd wish :-)
;; (call-with-current-continuation procedure?) ; #t

(procedure? apply)			; #t
(apply)					;Expecting at least 1 argument
(apply +)				; 0

(apply + (list 1 2 3))			; 6
(apply + 1 2)				;Last argument must be a list
(apply + 1 2 (list 3))			; 6
(apply equal? (list 1 2 3) (list (list 1 2 3))) ; #t

(apply * 1 2 3 4 5 (cons 6 nil))	; 720

(eval '(+ 1 2))				; 3
(eval '(+ 1 2) (interaction-environment))	; 3
(eval 3)				; 3

;; if () is not self-evaluating, this is an error
(eval '() (null-environment 5))		;Unknown expression type

;; allow unquoted
(eval (+ 2 3))				; 5

;; even if unquoted, the expression will still be evaluated in the
;; specified environment
(define x 1)				; x
(eval x (interaction-environment))	; 1
(eval x (null-environment 5))		;Unbound variable


(current-input-port)			; #<input-port
(current-output-port)			; #<output-port

(input-port? (current-input-port))	; #t
(input-port? (current-output-port))	; #f

(output-port? (current-output-port))	; #t
(output-port? (current-input-port))	; #f


(fold-left + 0 (list 1 2 3 4 5))	; 15
(fold-right + 0 (list 1 2 3 4 5))	; 15

(accumulate cons nil (list 1 2 3))	; (1 2 3)


